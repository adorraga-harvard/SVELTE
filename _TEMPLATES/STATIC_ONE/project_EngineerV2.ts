/**
 * project_EngineerV2.ts
 * =================================================================
 * PAGE ASSEMBLER & NAVIGATION SCRIPT (V2) - Final Architecture
 * =================================================================
 */

import { config } from './project_Config';
import type { Route } from './project_Config';
import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';

// --- CONFIGURATION ---
const PROVIDERS_DIR = path.resolve('./Providers');
const NAVIGATION_YAML_FILE = path.resolve('./navigation.yaml');
const RESOLVER_FILE = path.join(PROVIDERS_DIR, 'ProviderResolver.ts');
const COMPONENTS_BASE_PATH = '$lib/Components/Templates';

// --- ANSI COLORS & STYLES ---
const RESET = '\x1b[0m';
const BOLD = '\x1b[1m';
const RED = '\x1b[31m';
const GREEN = '\x1b[32m';
const YELLOW = '\x1b[33m';
const CYAN = '\x1b[36m';
const MAGENTA = '\x1b[35m';

// --- TYPE DEFINITION ---
interface NavNode {
  slug: string;
  navTitle: string;
  icon?: string | null;
  children?: NavNode[];
  description?: string;
}

// --- HELPERS ---
function kebabToPascalCase(kebab: string): string {
  return kebab
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
}

function traverseRoutes(
  nodes: Route[],
  callback: (route: Route, full_fs_path: string) => void,
  parentPath = ''
): void {
  for (const node of nodes) {
    const slugifiedPath = node.fs_path.replace(/\s+/g, '-').toLowerCase();
    const currentPath = path.join(parentPath, slugifiedPath).replace(/\\/g, '/');
    callback(node, currentPath);
    if (node.children && node.children.length > 0) {
      traverseRoutes(node.children, callback, currentPath);
    }
  }
}

function createNavigationStructure(nodes: Route[], parentPath = ''): NavNode[] {
  const navNodes: NavNode[] = [];
  for (const node of nodes) {
    const slugifiedPath = node.fs_path.replace(/\s+/g, '-').toLowerCase();
    const currentPath = path.join(parentPath, slugifiedPath).replace(/\\/g, '/');

    const navNode: NavNode = {
      slug: currentPath.startsWith('/') ? currentPath.substring(1) : currentPath,
      navTitle: node.navTitle,
      icon: node.icon,
      description: node.description || `Welcome to the ${node.navTitle} section.`
    };

    if (node.children && node.children.length > 0) {
      navNode.children = createNavigationStructure(node.children, currentPath);
    }
    navNodes.push(navNode);
  }
  return navNodes;
}

function createProviderFileV2(route: Route, full_fs_path: string): void {
  const templateNames = (route.templates || '').split(',').map((t) => t.trim()).filter(Boolean);
  const slugifiedNavTitle = route.navTitle.replace(/\s+/g, '-').toLowerCase();
  const providerFilePath = path.join(PROVIDERS_DIR, full_fs_path, slugifiedNavTitle, `+page.svelte`);

  fs.mkdirSync(path.dirname(providerFilePath), { recursive: true });

  let componentImports = '';
  let componentRenderings = '';

  if (templateNames.length > 0) {
    componentImports = templateNames
      .map((template) => {
        const componentName = kebabToPascalCase(template);
        return `import ${componentName} from '${COMPONENTS_BASE_PATH}/${componentName}.svelte';`;
      })
      .join('\n');

    componentRenderings = templateNames
      .map((template) => {
        const componentName = kebabToPascalCase(template);
        return `  <${componentName} props={data} />`;
      })
      .join('\n');
  } else {
    console.log(`${YELLOW}${BOLD}  ⚠ No templates for:${RESET} ${CYAN}${full_fs_path}${RESET}`);
  }

  // description (escaped for backticks)
  const descriptionText = route.description || `Welcome to the ${route.navTitle} section.`;
  const safeDescription = descriptionText.replace(/`/g, '\\`');

  // generate provider content
  const svelteContent = `<script lang="ts">
  // Auto-generated by project_EngineerV2.ts for path: /${full_fs_path}
  export let data: any;

${componentImports}
<\/script>

<div class="space-y-6 project-provider">
  ${route.description ? `<div class="project-page-intro  text-base-content/80 leading-relaxed">
    {@html \`${safeDescription}\`}
  </div>` : ''}
${componentRenderings}
</div>
`;

  fs.writeFileSync(providerFilePath, svelteContent, 'utf-8');
  console.log(`${GREEN}${BOLD}    ✔ Assembled provider:${RESET} ${CYAN}${providerFilePath}${RESET}`);
}

// --- MAIN EXECUTION ---
function main(): void {
  if (process.argv.length < 3) {
    console.error(`${RED}${BOLD}Usage:${RESET} npx tsx project_EngineerV2.ts "Friendly Name"`);
    process.exit(1);
  }

  const friendlyName = process.argv[2];
  const targetPath = path.basename(process.cwd());

  console.log(`\n${MAGENTA}${BOLD}>>> Project Engineer V2 Starting Build${RESET}\n`);
  console.log(`${CYAN}Friendly Name:${RESET} ${BOLD}${friendlyName}${RESET}`);
  console.log(`${CYAN}Target Path  :${RESET} ${BOLD}${targetPath}${RESET}\n`);

  // --- Generate navigation.yaml ---
  const navigationStructure = createNavigationStructure(config);
  const yamlContent = yaml.dump({
    targetPath,
    friendlyName,
    navigation: navigationStructure
  });
  fs.writeFileSync(NAVIGATION_YAML_FILE, yamlContent, 'utf-8');
  console.log(`${GREEN}${BOLD}  ✔ navigation.yaml generated with targetPath & friendlyName${RESET}`);
  console.log(`${YELLOW}  -> Path: ${NAVIGATION_YAML_FILE}${RESET}\n`);

  // --- Prepare Providers folder ---
  fs.rmSync(PROVIDERS_DIR, { recursive: true, force: true });
  fs.mkdirSync(PROVIDERS_DIR, { recursive: true });
  console.log(`${GREEN}${BOLD}  ✔ Providers folder created${RESET}: ${CYAN}${PROVIDERS_DIR}${RESET}\n`);

  // --- Generate Provider files + Resolver ---
  let resolverContent = `// Auto-generated by project_EngineerV2.ts on ${new Date().toString()}\nexport const providers = {\n`;

  traverseRoutes(config, (route, full_fs_path) => {
    createProviderFileV2(route, full_fs_path);

    const resolverPath = full_fs_path.startsWith('/') ? full_fs_path.substring(1) : full_fs_path;
    const slugifiedNavTitle = route.navTitle.replace(/\s+/g, '-').toLowerCase();
    const importPath = `./${full_fs_path}/${slugifiedNavTitle}/+page.svelte`;
    resolverContent += `  "${resolverPath}": () => import("${importPath}"),\n`;
  });

  resolverContent += '};\n';
  fs.writeFileSync(RESOLVER_FILE, resolverContent, 'utf-8');
  console.log(`${GREEN}${BOLD}  ✔ ProviderResolver.ts finalized${RESET}: ${CYAN}${RESOLVER_FILE}${RESET}`);

  console.log(`\n${MAGENTA}${BOLD}>>> Build Complete!${RESET}`);
  console.log(`${CYAN}✔ Navigation blueprint, descriptions, and Providers are ready.${RESET}\n`);
}

// --- RUN ---
main();
