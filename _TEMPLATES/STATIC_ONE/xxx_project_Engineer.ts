/*
 * xxx_project_Engineer.ts
 * ============================================================
 * Engineer utility â€” builds Provider Svelte files and resolver
 * based on project_Config.ts and project_Endpoints.ts
 * ============================================================
 */

import { config } from './project_Config';
import type { Route } from './project_Config';

import fs from 'fs';
import path from 'path';

// --- CONFIGURATION ---
const PROVIDERS_DIR = 'Providers';
const RESOLVER_FILE = path.join(PROVIDERS_DIR, 'ProviderResolver.ts');
const ENDPOINTS_FILE = 'project_Endpoints.ts';

// --- HELPER FUNCTIONS ---

function traverseRoutes(
  nodes: Route[],
  callback: (route: Route, full_fs_path: string) => void,
  parentPath = ''
): void {
  for (const node of nodes) {
    // Sanitize fs_path to ensure it's a valid directory name
    const safe_fs_path = node.fs_path.replace(/[^a-zA-Z0-9-]/g, '');
    const currentPath = path.join(parentPath, safe_fs_path).replace(/\\/g, '/');
    callback(node, currentPath);
    if (node.children && node.children.length > 0) {
      traverseRoutes(node.children, callback, currentPath);
    }
  }
}

/**
 * Creates a single Svelte provider file, including template snippets.
 */
function createProviderFile(route: Route, full_fs_path: string, endpointsContent: string): void {
  // --- FIXED: Create a directory name from navTitle ---
  // Sanitize the navTitle to remove spaces and special characters for the folder name.
  const navTitleDir = route.navTitle.replace(/\s+/g, '');

  // --- FIXED: The filename is always '+page.svelte' ---
  const providerFile = '+page.svelte';

  // --- FIXED: Construct the full path including the new {navTitle} directory ---
  // The new structure is: Providers/{fs_path}/{navTitleDir}/+page.svelte
  const fullProviderPath = path.join(PROVIDERS_DIR, full_fs_path, navTitleDir, providerFile);
  fs.mkdirSync(path.dirname(fullProviderPath), { recursive: true });

  let svelteContent = `<script lang="ts">
  // Auto-generated by xxx_project_Engineer.ts for path: /${full_fs_path}
  export let data: any;

  // --- DEFAULTS ---
  // Ensure filter object exists to prevent Svelte binding errors on optional chains.
  data.filter = data.filter || {};

  // --- Utility randomizers for demo data ---
  const R = <T>(arr: T[]): T => arr[Math.floor(Math.random() * arr.length)];
  const R_NUM = (min: number, max: number) =>
    Math.floor(Math.random() * (max - min + 1)) + min;
  const R_CURRENCY = (min: number, max: number) =>
    new Intl.NumberFormat('en-PH', { style: 'currency', currency: 'PHP' }).format(R_NUM(min, max));
  const R_DATE = () => {
    const end = new Date();
    const start = new Date(end.getTime() - 30 * 24 * 60 * 60 * 1000);
    return new Date(
      start.getTime() + Math.random() * (end.getTime() - start.getTime())
    ).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  };
  const R_TIME = () =>
    new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

  // --- MOCK DATA GENERATORS (to fix ReferenceError) ---
  const randomName = () => R(['Juan dela Cruz', 'Maria Santos', 'Andres Bonifacio', 'Gabriela Silang']);
  const randomDept = () => R(['DPWH', 'DOH', 'DOTr', 'DICT', 'City Health Office']);
  const randomLocation = () => R(['Quezon City', 'Makati City', 'Pasig City', 'Cebu City', 'Davao City']);
  const randomStatus = () => R([
      { label: 'Approved', badge: 'badge-success' },
      { label: 'Pending', badge: 'badge-warning' },
      { label: 'Rejected', badge: 'badge-error' }
    ]);
  const randomTask = () => R(['Submit annual report', 'Review budget proposal', 'Conduct site inspection']);
</script>

<div class="space-y-4">`;

  // âœ… Optional description support
  if (route.description) {
    svelteContent += `

  <div class="project_description">
    ${route.description}
  </div>`;
  }

  // âœ… Inject endpoint templates
  const templateNames = route.templates?.split(',').map((t) => t.trim()) || [];
  for (const name of templateNames) {
    if (!name) continue;
    const templateRegex = new RegExp(
      `^\\s*['"]?${name}['"]?: \\\`([\\s\\S]*?)\\\`\\s*,?$`,
      'm'
    );
    const match = endpointsContent.match(templateRegex);
    if (match && match[1]) {
      let snippet = match[1];

      // ðŸ”§ Fix shorthand attributes
      snippet = snippet.replace(/\{checked:\s*(.*?)\}/g, 'checked={$1}');
      snippet = snippet.replace(/\{disabled:\s*(.*?)\}/g, 'disabled={$1}');
      snippet = snippet.replace(/\{selected:\s*(.*?)\}/g, 'selected={$1}');

      // ðŸ”§ FIX: Correct invalid Svelte bind syntax with optional chaining (?.)
      snippet = snippet.replace(/bind:value={data\.filter\?\./g, 'bind:value={data.filter.');

      svelteContent += `\n\n${snippet}`;
    } else {
      console.warn(
        `    - âš  Warning: Template '${name}' not found in ${ENDPOINTS_FILE}.`
      );
    }
  }

  svelteContent += '\n</div>';
  fs.writeFileSync(fullProviderPath, svelteContent, 'utf-8');
  console.log(`    - âœ” Created: ${fullProviderPath}`);
}

/**
 * Main execution
 */
function main(): void {
  console.log('\n>>> Engineer (TypeScript) starting build...');

  if (!fs.existsSync(ENDPOINTS_FILE)) {
    console.error(`ERROR: UI Endpoints file not found! (${ENDPOINTS_FILE})`);
    process.exit(1);
  }
  const endpointsContent = fs.readFileSync(ENDPOINTS_FILE, 'utf-8');
  console.log('  - Verified required files are present.');

  // Clean + recreate Providers directory
  fs.rmSync(PROVIDERS_DIR, { recursive: true, force: true });
  fs.mkdirSync(PROVIDERS_DIR, { recursive: true });

  // Build resolver map
  let resolverContent = `// Auto-generated by project_Engineer.ts on ${new Date().toString()}\nexport const providers = {\n`;

  traverseRoutes(config, (route, full_fs_path) => {
    if (route.templates) {
      createProviderFile(route, full_fs_path, endpointsContent);

      const resolverPath = full_fs_path.startsWith('/')
        ? full_fs_path.substring(1)
        : full_fs_path;

      // --- FIXED: Create a directory name from navTitle (must match createProviderFile) ---
      const navTitleDir = route.navTitle.replace(/\s+/g, '');
      const providerFile = '+page.svelte';

      // --- FIXED: Update the import path to match the new file structure ---
      const importPath = `../Providers/${full_fs_path}/${navTitleDir}/${providerFile}`;

      resolverContent += `  "${resolverPath}": () => import("${importPath}"),\n`;
    }
  });

  resolverContent += '};\n';
  fs.writeFileSync(RESOLVER_FILE, resolverContent, 'utf-8');
  console.log('  - Finalized ProviderResolver.ts');
  console.log('  âœ” Construction complete.\n');
}

// --- RUN ---
main();

