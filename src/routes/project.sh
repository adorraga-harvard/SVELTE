#!/usr/bin/env bash
set -euo pipefail

# ==================== COLORS ====================
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m'

# ==================== ARGS ====================
if [ "$#" -lt 2 ]; then
  echo -e "${RED}Usage:${NC} $0 <PROJECT_NAME> <PROJECT_FULL_NAME>"
  exit 1
fi

ARG1="$1"
ARG2="$2"

# ==================== PATHS (REFACTORED) ====================
# Determine paths relative to the script's location for robustness.
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
PROJECT_ROOT=$(dirname "$(dirname "$SCRIPT_DIR")") # Resolves to the project's root folder (sibling of 'src' and '_TEMPLATE')
ROUTES_ROOT="$SCRIPT_DIR"                          # This is the 'src/routes' directory where the script lives
TEMPLATE_ROOT="$PROJECT_ROOT/_TEMPLATES"            # This is the correct '_TEMPLATE' folder
DST="$ROUTES_ROOT/$ARG1"                           # This is the final destination, e.g., 'src/routes/my-app'

echo -e "${CYAN}>>> Setting up project: ${YELLOW}${ARG1}${NC}"

# ==================== CREATE ROOT FOLDER ====================
mkdir -p "$DST"

# ==================== COPY STATIC_ONE (Paths Updated) ====================
echo -e "${CYAN}>>> Copying STATIC_ONE files to $DST...${NC}"
cp "$TEMPLATE_ROOT/STATIC_ONE/project_"* "$DST/"
cp "$TEMPLATE_ROOT/STATIC_ONE/+"* "$DST/"
cp "$TEMPLATE_ROOT/STATIC_ONE/De"* "$DST/"
cp "$TEMPLATE_ROOT/STATIC_ONE/Config_${ARG1}.ts" "$DST/project_Config.ts"
echo -e "  ${GREEN}‚úî STATIC_ONE files copied${NC}"

# ==================== COPY STATIC_TWO (Paths Updated) ====================
mkdir -p "$DST/[...slug]"
echo -e "${CYAN}>>> Copying STATIC_TWO files to $DST/[...slug]...${NC}"
cp "$TEMPLATE_ROOT/STATIC_TWO/"* "$DST/[...slug]/"
echo -e "  ${GREEN}‚úî STATIC_TWO files copied${NC}"

# ==================== PLACEHOLDER REPLACEMENTS ====================
echo -e "${CYAN}>>> Performing placeholder replacements...${NC}"
for f in "$DST/"* "$DST/[...slug]"/* "$DST/project_Utils.ts"; do
    [ -f "$f" ] || continue
    sed -i "s/ARGUMENT_ONE/$ARG1/g" "$f"
    sed -i "s/ARGUMENT_TWO/$ARG2/g" "$f"
done
echo -e "  ${GREEN}‚úî Placeholders replaced in static files${NC}"

# ==================== CHANGE TO TARGET DIR ====================
cd "$DST"

## ==================== VERIFY CONFIGS ====================
CONFIG_FILE="$DST/project_Config.ts"
ENDPOINT_FILE="$DST/project_Endpoints.ts"
if [ ! -f "$CONFIG_FILE" ]; then echo -e "${RED}ERROR: $CONFIG_FILE not found!${NC}"; exit 1; fi
if [ ! -f "$ENDPOINT_FILE" ]; then echo -e "${RED}ERROR: $ENDPOINT_FILE not found!${NC}"; exit 1; fi
echo -e ">>> Verified ${GREEN}project_Config.ts${NC} and ${GREEN}project_Endpoints.ts${NC} exist"

## ==================== PROCESS ENDPOINTS ====================
echo -e "${CYAN}>>> Processing endpoints from project_Config.ts...${NC}"
RESOLVER_FILE="$DST/Providers/ProviderResolver.ts"
mkdir -p "$(dirname "$RESOLVER_FILE")"
echo "// Auto-generated by project.sh on $(date)" > "$RESOLVER_FILE"
echo "export const providers = {" >> "$RESOLVER_FILE"

awk '
  /end_point:/ {
    ep = $0;
    sub(/.*end_point\s*:\s*[\x27\x22]/, "", ep);
    sub(/[\x27\x22].*/, "", ep);
  }
  /end_point_type:/ {
    ept = $0;
    sub(/.*end_point_type\s*:\s*[\x27\x22]/, "", ept);
    sub(/[\x27\x22].*/, "", ept);
    if (ep != "") { print ep "|" ept; ep = ""; ept = ""; }
  }
' "$CONFIG_FILE" | while IFS='|' read -r EP_PATH EP_TYPES; do
    if [ -z "$EP_PATH" ]; then continue; fi

    mkdir -p "$(dirname "$EP_PATH")"

    # [CORRECT LOGIC] The Svelte <script> block, including all randomization logic,
    # is generated here, inside the script.
    SVELTE_CONTENT=$(cat <<EOF
<script lang="ts">
  // Auto-generated for $EP_PATH
  // Endpoint type(s): $EP_TYPES
  export let data: any;

  $: console.log('Page Data for ${EP_PATH}:', data);

  // --- UTILITY FUNCTIONS FOR DYNAMIC DATA ---
  const R = (arr: any[]) => arr[Math.floor(Math.random() * arr.length)];
  const R_NUM = (min: number, max: number) => Math.floor(Math.random() * (max - min + 1)) + min;
  const R_CURRENCY = (min: number, max: number) => new Intl.NumberFormat('en-PH', { style: 'currency', currency: 'PHP' }).format(R_NUM(min, max));
  const R_DATE = () => {
    const end = new Date();
    const start = new Date(end.getTime() - (30 * 24 * 60 * 60 * 1000));
    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
  };
  const R_TIME = () => new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

  // --- SAMPLE DATA ARRAYS ---
  const NAMES: string[] = ['Angela Reyes', 'Miguel Santos', 'Sofia Dela Cruz', 'Carlos Imperial', 'Bea Alonzo-Domingo'];
  const DEPARTMENTS: string[] = ["Assessor's Office", 'Engineering Dept.', 'Health Department', 'Social Services', 'BPLO'];
  const LOCATIONS: string[] = ['Quezon City Hall', 'Novaliches District Center', 'La Loma Health Center', 'Cubao Business Center'];
  const STATUSES: { label: string; badge: string }[] = [
    { label: 'Approved', badge: 'badge-success' }, { label: 'Pending Review', badge: 'badge-warning' },
    { label: 'For Inspection', badge: 'badge-info' }, { label: 'Rejected', badge: 'badge-error' },
  ];
  const TASKS: string[] = ['Initial Document Review', 'Site Inspection Schedule', 'Final Assessment', 'Permit Issuance', 'Compliance Check'];
  const ALERTS: string[] = ['Heavy Traffic on Elliptical Road', 'Flood Warning: Project 4', 'Scheduled Power Interruption', 'Community Health Drive'];
  const FILE_TYPES: { icon: string; name: string; ext: string }[] = [
    { icon: 'üìÑ', name: 'BarangayClearance', ext: '.pdf' }, { icon: 'üìä', name: 'FinancialStatement', ext: '.xlsx' },
    { icon: 'üñºÔ∏è', name: 'SitePhotograph', ext: '.jpg' }, { icon: 'üì¶', name: 'ProjectProposal', ext: '.zip' },
  ];

  // --- GENERATED VALUES FOR THIS PAGE LOAD ---
  const randomName = R(NAMES);
  const randomDept = R(DEPARTMENTS);
  const randomLocation = R(LOCATIONS);
  const randomStatus = R(STATUSES);
  const randomTask = R(TASKS);
  const randomAlert = R(ALERTS);
  const randomFile = R(FILE_TYPES);
  const randomAmount = R_CURRENCY(15000, 150000);
  const tableStatus1 = R(STATUSES);
  const tableStatus2 = R(STATUSES);
  const documentFile2 = R(FILE_TYPES);
</script>

<div class="endpoint-container p-4 space-y-4">
EOF
)

    IFS=',' read -ra TYPES <<< "$EP_TYPES"
    for t in "${TYPES[@]}"; do
        t_trim=$(echo "$t" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        if [ -n "$t_trim" ]; then
          TEMPLATE_CONTENT=$(awk -v type="$t_trim" '$1 == type":" {flag=1; next} flag && /`\s*,?$/ {flag=0} flag' "$ENDPOINT_FILE")
          SVELTE_CONTENT+=$'\n'"$TEMPLATE_CONTENT"
        fi
    done
    SVELTE_CONTENT+=$'\n</div>'

    echo "$SVELTE_CONTENT" > "$EP_PATH"

    sed -i "s/{data.pageData.title}/{data.pageData?.title || 'Page Title'}/g" "$EP_PATH"
    sed -i "s/{data.pageData.description}/{data.pageData?.description || 'Page description.'}/g" "$EP_PATH"

    RELATIVE_PATH=${EP_PATH#Providers/}
    echo "  \"$EP_PATH\": () => import(\"./$RELATIVE_PATH\")," >> "$RESOLVER_FILE"

    echo -e "  ${GREEN}‚úî Endpoint created:${NC} $EP_PATH ${YELLOW}[types: $EP_TYPES]${NC}"
done

echo "};" >> "$RESOLVER_FILE"
echo -e "${GREEN}>>> Project ${ARG1} setup complete!${NC}"